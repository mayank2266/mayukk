import numpy as np

# Initialize the game settings
grid_size = 5
treasure_symbol = 'T'
player_symbol = 'P'
empty_symbol = '.'

# Create the grid
grid = np.full((grid_size, grid_size), empty_symbol)

# Place the player and the treasure randomly on the grid
player_position = (np.random.randint(0, grid_size), np.random.randint(0, grid_size))
treasure_position = (np.random.randint(0, grid_size), np.random.randint(0, grid_size))

# Ensure the treasure is not placed at the player's initial position
while treasure_position == player_position:
    treasure_position = (np.random.randint(0, grid_size), np.random.randint(0, grid_size))

grid[player_position] = player_symbol
grid[treasure_position] = treasure_symbol

# Function to print the grid
def print_grid(grid):
    for row in grid:
        print(' '.join(row))
    print()

# Function to move the player
def move_player(grid, current_position, direction):
    x, y = current_position
    grid[x, y] = empty_symbol  # Clear the current position

    if direction == 'up' and x > 0:
        x -= 1
    elif direction == 'down' and x < grid_size - 1:
        x += 1
    elif direction == 'left' and y > 0:
        y -= 1
    elif direction == 'right' and y < grid_size - 1:
        y += 1

    new_position = (x, y)
    grid[new_position] = player_symbol
    return new_position

# Game loop
while True:
    print_grid(grid)
    move = input("Enter move (up, down, left, right): ").strip().lower()
    
    if move in ['up', 'down', 'left', 'right']:
        player_position = move_player(grid, player_position, move)
        
        if player_position == treasure_position:
            print_grid(grid)
            print("Congratulations! You found the treasure!")
            break
    else:
        print("Invalid move. Please enter 'up', 'down', 'left', or 'right'.")
